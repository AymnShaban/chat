# Validating Email Forms in Flutter
To validate email inputs in Flutter and ensure you only
get correctly formatted email addresses,
you have several options. Here are the best approaches:
## 1. Using the email_validator Package
The easiest way is to use a dedicated package:
1. Add the package to your pubspec.yaml:
yaml
dependencies:
  email_validator: ^2.1.17
2. Implement the validation:
dart
import 'package:email_validator/email_validator.dart';
TextFormField(
  keyboardType: TextInputType.emailAddress,
  decoration: InputDecoration(
    labelText: 'Email',
    hintText: 'Enter your email',
  ),
  validator: (value) {
    if (value == null || value.isEmpty) {
      return 'Please enter an email';
    }
    if (!EmailValidator.validate(value)) {
      return 'Please enter a valid email';
    }
    return null;
  },
)
## 2. Using Regular Expression (RegExp)

If you prefer not to use a package, you can use a regex pattern:

dart
TextFormField(
  keyboardType: TextInputType.emailAddress,
  decoration: InputDecoration(
    labelText: 'Email',
    hintText: 'Enter your email',
  ),
  validator: (value) {
    if (value == null || value.isEmpty) {
      return 'Please enter an email';
    }
    final bool isValid = RegExp(
      r'^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ).hasMatch(value);
    if (!isValid) {
      return 'Please enter a valid email';
    }
    return null;
  },
)


## 3. Complete Form Validation Example

Here's a complete example with a form and submit button:

dart
import 'package:flutter/material.dart';
import 'package:email_validator/email_validator.dart';

class EmailFormExample extends StatefulWidget {
  @override
  _EmailFormExampleState createState() => _EmailFormExampleState();
}

class _EmailFormExampleState extends State<EmailFormExample> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();

  @override
  void dispose() {
    _emailController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Email Validation')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _emailController,
                keyboardType: TextInputType.emailAddress,
                decoration: InputDecoration(
                  labelText: 'Email',
                  hintText: 'example@domain.com',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter an email';
                  }
                  if (!EmailValidator.validate(value)) {
                    return 'Please enter a valid email';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    // Form is valid, proceed with submission
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Processing Data: ${_emailController.text}')),
                    );
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


## Additional Tips

1. *Autocorrect and Autocapitalize*: For email fields, it's good practice to disable these:
dart
TextFormField(
  autocorrect: false,
  enableSuggestions: false,
  // ... other properties
)


2. *Trim Whitespace*: Consider trimming the input to remove accidental spaces:
dart
validator: (value) {
  final trimmedValue = value?.trim();
  if (trimmedValue == null || trimmedValue.isEmpty) {
    return 'Please enter an email';
  }
  // ... rest of validation
}


3. *Real-time Validation*: You can use onChanged to validate as the user types:
dart
onChanged: (value) {
  if (EmailValidator.validate(value)) {
    // Email is valid
  }
}


Choose the method that best fits your needs - the package approach is more maintainable as it stays updated with email specification changes, while the regex approach gives you more control.